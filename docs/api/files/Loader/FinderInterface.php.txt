<?php

/**
 * States.
 *
 * LICENSE
 *
 * This source file is subject to the MIT license and the version 3 of the GPL3
 * license that are bundled with this package in the folder licences
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to richarddeloge@gmail.com so we can send you a copy immediately.
 *
 *
 * @copyright   Copyright (c) 2009-2016 Richard Déloge (richarddeloge@gmail.com)
 *
 * @link        http://teknoo.software/states Project website
 *
 * @license     http://teknoo.software/license/mit         MIT License
 * @author      Richard Déloge <richarddeloge@gmail.com>
 */
namespace Teknoo\States\Loader;

use Teknoo\States\State\StateInterface;
use Teknoo\States\Proxy\ProxyInterface;

/**
 * Interface FinderInterface
 * To define finder, it is used with this library to find from each stated class
 * all states and the proxy. It needs an instance of the Composer Loader to find php classes and load them.
 *
 *
 * @copyright   Copyright (c) 2009-2016 Richard Déloge (richarddeloge@gmail.com)
 *
 * @link        http://teknoo.software/states Project website
 *
 * @license     http://teknoo.software/license/mit         MIT License
 * @author      Richard Déloge <richarddeloge@gmail.com>
 *
 * @api
 */
interface FinderInterface
{
    /**
     * Folder where stored states of the stated class.
     */
    const STATES_PATH = 'States';

    /**
     * To get the canonical stated class name associated to this state.
     *
     * @return string
     */
    public function getStatedClassName(): string;

    /**
     * To list all available states of the stated class.
     *
     * @return string[]
     *
     * @throws Exception\UnavailablePath if the states' folder is not available
     * @throws Exception\UnReadablePath  if the states' folder is not readable
     */
    public function listStates();

    /**
     * To load the required state object of the stated class.
     *
     * @param string $stateName
     *
     * @return string
     *
     * @throws Exception\UnavailableState if the required state is not available
     */
    public function loadState(string $stateName): string;

    /**
     * To return the list of parent php classes used by a state.
     *
     * @param string $stateName
     *
     * @return string[]
     *
     * @throws Exception\UnavailableState if the required state is not available
     */
    public function getStateParentsClassesNamesList(string $stateName): array;

    /**
     * To load and build the required state object of the stated class.
     *
     * @param string $stateName
     * @param bool   $privateMode     : If it's enable, private methods are not available
     * @param string $statedClassName
     * @param array  $aliases
     *
     * @return StateInterface
     *
     * @throws Exception\UnavailableState if the required state is not available
     * @throws Exception\IllegalState     if the state object does not implement the interface
     */
    public function buildState(string $stateName, bool $privateMode, string $statedClassName, array $aliases = []): StateInterface;

    /**
     * To search and load the proxy class for this stated class.
     * If the class has not proxy, load the default proxy for this stated class.
     *
     * @return string
     */
    public function loadProxy(): string;

    /**
     * To return the list of parents stated classes of the stated classes, library classes (Integrated proxy and
     * standard proxy are excluded).
     *
     * @return string[]
     *
     * @throws Exception\IllegalProxy If the proxy class is not valid
     */
    public function listParentsClassesNames();

    /**
     * To load and build a proxy object for the stated class.
     *
     * @param array $arguments argument for proxy
     *
     * @return ProxyInterface
     *
     * @throws Exception\IllegalProxy If the proxy object does not implement Proxy/ProxyInterface
     */
    public function buildProxy($arguments = null): ProxyInterface;
}

